{-# STDLIB_VERSION 5     #-}
{-# SCRIPT_TYPE ACCOUNT  #-}
{-# CONTENT_TYPE DAPP    #-}

let oracle = Address(base58'') # Need to filled

let SWOPgovernanceAdr = oracle.getString("swop_governance").valueOrErrorMessage("Empty key swop_governance").addressFromStringValue()
let WavesUsdnPool = oracle.getString("WAVES_USDN_pool").valueOrElse("Empty key WAVES_USDN_pool").addressFromString().value()
let consumers = oracle.getString("consumers").valueOrElse("Empty key consumer").split(",")
let admin1 = oracle.getString("admin_1").valueOrElse("Empty key admin_1").addressFromStringValue()
let admin2 = oracle.getString("admin_2").valueOrElse("Empty key admin_2").addressFromStringValue()
let admin3 = oracle.getString("admin_3").valueOrElse("Empty key admin_3").addressFromStringValue()
let admin4 = oracle.getString("admin_4").valueOrElse("Empty key admin_4").addressFromStringValue()
let admin5 = oracle.getString("admin_5").valueOrElse("Empty key admin_5").addressFromStringValue()
let feeInUSDN = oracle.getInteger("protocol_fee_in_usdn").valueOrErrorMessage("Empty protocol_fee_in_usdn")
let isProtocolActive = oracle.getBoolean("is_protocol_active").valueOrErrorMessage("Empty key is_protocol_active")

let keyAutomateOwner = "owner"
let keyBalance = "_balance"
let keyIsDappActive = "is_dapp_active"
let keyOverallBalance = "overall_balance"

let isDappActive = this.getBoolean(keyIsDappActive).valueOrErrorMessage("Empty key is_dapp_active")
let orverallBalance =  this.getInteger(keyOverallBalance).valueOrErrorMessage("Empty key overall_balance")
let blockchainFee = 500000 # 0.005 WAVES

func getUserBalance(userStr: String) = {
    let userBalance = match this.getInteger(userStr + keyBalance) {
    case ub: Int => ub
    case empty: Unit => 0
    }
    userBalance
}

func calcWavesProtocolFee () = {
    let balanceUSDN = WavesUsdnPool.getInteger("B_asset_balance").valueOrErrorMessage("Empty B_asset_balance")
    let balanceWAVES = WavesUsdnPool.getInteger("A_asset_balance").valueOrErrorMessage("Empty A_asset_balance")
    let feeInWAVES = fraction(feeInUSDN,balanceWAVES,balanceUSDN) # fee in WAVES
    feeInWAVES + blockchainFee
}

func isTransactionApproved(txStr: String) ={
    let admin1Signed = if admin1.getBoolean(txStr).valueOrElse(false) then 1 else 0
    let admin2Signed = if admin2.getBoolean(txStr).valueOrElse(false) then 1 else 0
    let admin3Signed = if admin3.getBoolean(txStr).valueOrElse(false) then 1 else 0
    let admin4Signed = if admin4.getBoolean(txStr).valueOrElse(false) then 1 else 0
    let admin5Signed = if admin5.getBoolean(txStr).valueOrElse(false) then 1 else 0
    admin1Signed + admin2Signed + admin3Signed + admin4Signed + admin5Signed >= 3
}

@Callable(i)
func init()  = {
    if this.getString("is_dapp_active").isDefined() || this.getInteger("overall_balance").isDefined() then throw("Already initialized")
    else
        [
            IntegerEntry("overall_balance", 0),
            BooleanEntry("is_dapp_active", true)
        ]
}

@Callable(i)
func extractFee() = if !(isProtocolActive && isDappActive) then throw("Protol stopped by admin") else {
    let user = i.caller.getString(keyAutomateOwner).valueOrErrorMessage("Empty keyOwner")
    let originCallerAdr = i.originCaller.toString()
    let isConsumerCall = consumers.containsElement(originCallerAdr).valueOrErrorMessage("Empty key: consumers")
    if !isConsumerCall then
        throw(originCallerAdr + " is not a consumer")
    else
        let protocolFee = calcWavesProtocolFee()
        let userBalance = getUserBalance(user)
        let newUserBalance = userBalance - protocolFee
        let newOrverallBalance = orverallBalance - protocolFee 
        if newUserBalance < 0 then throw("Insufficient new balance: " + newUserBalance.toString() + " for user " + user) else
        if newOrverallBalance < 0 then throw("Negativa overall balance:" + newOrverallBalance.toString()) else
        [
            IntegerEntry(user + keyBalance, newUserBalance),
            IntegerEntry(keyOverallBalance, newOrverallBalance)
        ]
}

@Callable(i)
func replenishBalance(userToReplenish: String) = if !(isProtocolActive && isDappActive) then throw("Protol stopped by admin") else {
    let userToReplenishAddress = userToReplenish.addressFromString().valueOrErrorMessage("Argument must be base58 string address") 

    let (pmtAmount, pmtAssetId) = (i.payments[0].amount, i.payments[0].assetId)
    if pmtAssetId != unit then 
        throw("Only WAVES available for replenishment") 
    else
        let userToReplenishBalance = getUserBalance(userToReplenish)
        let newUserBalance = userToReplenishBalance + pmtAmount
        let newOrverallBalance = orverallBalance + pmtAmount
        [
            IntegerEntry(userToReplenishAddress.bytes.toBase58String() + keyBalance, newUserBalance),
            IntegerEntry(keyOverallBalance, newOrverallBalance)
        ]
}

@Callable(i)
func withdraw(withdrawAmt: Int) = if !(isProtocolActive && isDappActive) then throw("Protol stopped by admin") else {
        let callerStr = i.caller.toString()
        let callerBalance = getUserBalance(callerStr)
        let newCallerBalance = callerBalance - withdrawAmt
        let newOrverallBalance = orverallBalance - withdrawAmt
        if withdrawAmt > callerBalance then throw("withdrawAmt > callerBalance") else
        [
            IntegerEntry(callerStr + keyBalance, newCallerBalance),
            IntegerEntry(keyOverallBalance, newOrverallBalance),
            ScriptTransfer(i.caller, withdrawAmt, unit)       
        ]
}

@Callable(i)
func incomeProtocolWithdraw(addresForSendingIncome : String) = if !(isProtocolActive && isDappActive) then throw("Protocol stopped by admin") else {
    if !isTransactionApproved(i.transactionId.toBase58String()) then throw("Transaction id not approved by admins") else 
    let income = this.wavesBalance().available - orverallBalance
    if income <= 0 then throw("income <= 0 ") else
    [
        ScriptTransfer(addresForSendingIncome.addressFromString().valueOrErrorMessage("Argument must be base58 string address"), income, unit)
    ]
}

@Callable(i)
func shutdownDapp() = if !isDappActive then throw("Protol stopped by admin") else {
    if ![admin1, admin2, admin3,admin4,admin5].containsElement(i.caller) && !consumers.containsElement(i.caller.bytes.toBase58String()) then
        throw("Only admin can call this function")
    else
        [BooleanEntry("is_dapp_active", false)]
}

@Verifier(tx)
func verify() = {
    if !isTransactionApproved(tx.id.toBase58String()) then throw("Transaction id not approved by admins") else true
}
